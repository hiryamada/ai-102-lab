#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"name":"csharp"},{"name":"fsharp","languageName":"F#","aliases":["f#","fs"]},{"name":"html","languageName":"HTML"},{"name":"http","languageName":"HTTP"},{"name":"javascript","languageName":"JavaScript","aliases":["js"]},{"name":"mermaid","languageName":"Mermaid"},{"name":"pwsh","languageName":"PowerShell","aliases":["powershell"]},{"name":"value"}]}}

#!csharp

Console.WriteLine("hello from C#");

#!pwsh

Write-Host "hello from PowerShell"

#!pwsh

# Visual Studio Code の上部にテキストボックスが表示されます。
# ラボ手順書の「リソース」タブの上部に表示されているユーザー名をクリックしてユーザー名を入力し、エンターを押してください。

#!set --name username --value @input:"Azure portal用のユーザー名"

#!pwsh

# Visual Studio Code の上部にテキストボックスが表示されます。
# ラボ手順書の「リソース」タブの上部に表示されているパスワードをクリックしてパスワードを入力し、エンターを押してください。

#!set --name password --value @input:"Azure portal用のパスワード"

#!pwsh

# Azure CLI でログイン

az login -u "$username" -p "$password"

#!pwsh

# あらかじめ作成済みのリソースグループを取得

$group = az group list --query "[].name" -o tsv
$group

#!pwsh

# ランダムな数値を作成

$suffix = "lab" + (Get-Random -Minimum 10000000 -Maximum 99999999)
$suffix

#!pwsh

# リソース名とリージョンを決定

$oainame = "oai" + $suffix
$storagename = "stor" + $suffix
$aisearchname = "aisearch" + $suffix
$location = "eastus"

#!pwsh

# Azure AI SearchのBasic価格レベルを作成。5～6分かかる。
az search service create -n $aisearchname -g $group -l $location `
    --sku basic --identity-type SystemAssigned

#!pwsh

$mid = (az search service show -n $aisearchname -g $group --query identity.principalId -otsv)

#!pwsh

# Azure OpenAI リソースを作成

az cognitiveservices account create `
  -n $oainame -g $group -l $location --kind "OpenAI" --sku "S0" --custom-domain $oainame

#!pwsh

# Azure OpenAI リソースの ID を取得

$rid = (az cognitiveservices account show -n $oainame -g $group --query id -otsv)

#!pwsh

# Azure OpenAI リソースにおいて、
# Azure AI Search のマネージドIDに
# 「Cognitive Services OpenAI User」ロールを割り当て

az role assignment create `
    --assignee-object-id $mid `
    --assignee-principal-type ServicePrincipal `
    --role "Cognitive Services OpenAI User" `
    --scope $rid

#!pwsh

# GPT-4o モデルをデプロイ

az cognitiveservices account deployment create `
    -g $group `
    -n $oainame `
    --deployment-name gpt-4o `
    --model-name gpt-4o `
    --model-version 2024-11-20 `
    --model-format OpenAI `
    --sku-name "Standard" `
    --sku-capacity 50

#!pwsh

# text-embedding-ada-002 モデルをデプロイ

az cognitiveservices account deployment create `
    -g $group `
    -n $oainame `
    --deployment-name text-embedding-ada-002 `
    --model-name text-embedding-ada-002 `
    --model-version 2 `
    --model-format OpenAI `
    --sku-name "Standard" `
    --sku-capacity 50

#!pwsh

# ストレージアカウントを作成

az storage account create -n $storagename -g $group -l $location `
  --sku Standard_LRS --kind StorageV2

#!pwsh

# ストレージアカウントの ID を取得

$rid = (az storage account show -n $storagename -g $group --query id -otsv)

#!pwsh

# ストレージアカウントにおいて、
# Azure AI Search のマネージドIDに
# 「Storage Blob Data Contributor」ロールを割り当て

az role assignment create `
    --assignee-object-id $mid `
    --assignee-principal-type ServicePrincipal `
    --role "Storage Blob Data Contributor" `
    --scope $rid

#!pwsh

# ストレージアカウントのキーを取得

$stkey = (az storage account keys list --account-name $storagename -g $group `
    --query "[?keyName=='key1'].value | [0]" -o tsv)

#!pwsh

# Blobコンテナーを作成

az storage container create --name brochures --account-name $storagename --auth-mode key --account-key $stkey

#!pwsh

# BlobコンテナーにPDFをアップロード

az storage blob upload-batch --account-name $storagename --account-key $stkey `
  --source brochures --destination brochures

#!html

<h1>インデックスの作成</h1>

<p>ここで、Edge Webブラウザーを開き、Azure portal（ https://portal.azure.com/ ）に移動し、Azure AI Search で「データのインポートとベクター化」を実行します。手順は以下を参照してください。</p>
<p>
<a href="https://microsoftlearning.github.io/mslearn-openai.ja-jp/Instructions/Exercises/02-use-own-data.html#%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B">インデックスを作成する</a>
</p>
<p>「データのインポートとベクター化」の最後のページで、「オブジェクト名のプレフィックス」 は「margies-index」 と入力してください。</p>
<p> 「作成に成功しました」と表示されたら、このファイルに戻ってきて続きを実行してください。</p>

#!pwsh

# Azure AI Search のエンドポイントを環境変数にセット

$env:SEARCH_ENDPOINT = "https://$aisearchname.search.windows.net"
$env:SEARCH_ENDPOINT

#!pwsh

# Azure AI Search のキーを環境変数にセット

$env:SEARCH_KEY = (az search admin-key show --service-name $aisearchname -g $group --query "primaryKey" -o tsv)
$env:SEARCH_KEY

#!pwsh

# Azure AI Search のインデックス名を環境変数にセット

$env:SEARCH_INDEX = "margies-index"
$env:SEARCH_INDEX

#!pwsh

# Azure OpenAI のエンドポイントを環境変数にセット

$env:OPENAI_ENDPOINT = "https://$oainame.openai.azure.com/"
$env:OPENAI_ENDPOINT

#!pwsh

# Azure OpenAI のキーを環境変数にセット

$env:OPENAI_KEY = (az cognitiveservices account keys list --name $oainame -g $group --query "key1" -o tsv)
$env:OPENAI_KEY

#!pwsh

# Azure OpenAI デプロイ名を環境変数にセット

$env:OPENAI_DEPLOY_NAME = "gpt-4o"
$env:OPENAI_DEPLOY_NAME

#!pwsh

# 以上でセットアップは完了です。プログラムを実行します。

# ここではユーザーがNew Yorkの宿泊先をアシスタントに問い合わせます。
# 
# ここではまだ on your data を使いません。
# アシスタントは自分が持っている知識に基づいて回答を生成します

dotnet run

#!pwsh

# つぎに on your data を使います。
# アシスタントは接続されたPDFファイルを検索し、ユーザーの質問に答えます。
# たとえば「マンハッタンホテル, グランドセントラルホテル, パークホテル」のような回答が得られます。
# これらはPDFに記載されているホテル名です。

dotnet run onyourdata

#!pwsh

# 以上です
